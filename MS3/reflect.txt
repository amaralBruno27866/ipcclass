/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  : Bruno Amaral
Student ID#: 143766228
Email      : bamaral2@myseneca.ca
Section    : ZFF

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

# 01. 
These are the 3 function I have created:

-> sortArrayOfAppointments(struct Appointment* appointments, int maxAppointments);
This content explains how the Selection Sort algorithm is used to arrange appointments in ascending order based on their date and time attributes. It is seamlessly integrated into the viewAllAppointments() function to ensure appointments are presented in an orderly manner. This methodology was inspired by the Wikipedia page that explains the intricacies of the Selection Sort algorithm (https://en.wikipedia.org/wiki/Selection_sort). By using a systematic algorithmic strategy aligned with computer science and software engineering principles, the appointment arrangement within the system is made more efficient and clear.

-> int getMaximumDayOfTheMonth(int year, int month);
To complete the task at hand, we need to create a function that can determine the last day of a given month based on the year and month inputs provided. The months are numbered from 1 for January to 12 for December. The function follows a specific algorithm that works as follows:

If the month is 4, 6, 9, 10, or 11, the final day of the month is determined to be the 31st.

However, for months 1, 3, 5, 7, 8, 10, or 12, the algorithm takes a different approach.

If the month is February (numbered as 2), an additional check is conducted to determine if the year is a leap year. If the year is divisible by 4, February's last day is the 29th. In other cases, the final day of February is the 28th.

This algorithm is based on computer science and software engineering principles, providing a structured approach to calculating calendar dates. By using numerical month indices and accounting for leap years, the function can accurately and efficiently determine the maximum day for any given month and year input. 

-> int convertStringToNumber(char* str);
In this article, we discuss the importance of converting a string to an integer data type, which is a crucial component of the importPatients() function. This function reads the contents of a file called patientData.txt and processes it line by line, dividing each line at the "|" character to analyze it. 

One critical aspect of this function is the initial token extracted from each line, which represents the patientNumber attribute. This token is initially presented as a character array (char[]), but to integrate this value into the struct patients, it must be converted to an integer representation.

This process is based on fundamental principles of computer science and software engineering. By parsing patient data, converting strings to integers, and structuring the data accordingly, the system can combine different data types seamlessly. This approach ensures data integrity and functional cohesion within the broader context of data management and manipulation.

# 02.
In this module, we have made a deliberate effort to minimize the use of scanf function calls. This optimization was made possible by incorporating USER INTERFACE FUNCTIONS, which are clearly defined in the core.c file. These functions serve as keystones in streamlining user interactions, allowing for the input of diverse data types such as integers, strings, characters, and ranges.

The core.c file includes an array of specialized functions, such as:

- int inputIntPositive(): Used for obtaining positive integer inputs.
- int inputIntRange(int lowerBound, int upperBound): Tailored for acquiring integers within specified ranges.
- char inputCharOption(const char validChar[]): Enables character inputs from pre-defined valid sets.
- void inputCString(char* word, int minimum, int maximum): Engages users in string inputs, with minimum and maximum length limits.
- An extension to core.c also includes inputPhoneNumber, which functions similarly to inputCString but enforces a fixed length defined by "min" and "max" values.

The strategic integration of these functions reflects meticulous programming, optimizing user interactions, minimizing redundancy, and improving modularity and efficiency. This approach is rooted in computer science and software engineering, harmonizing user-centered design with robust programming principles.

# 03.
-> function sortArrayOfAppointments() was created into clinic.c/clinic.h
The clinic management system has a function called sortArrayOfAppointments() that is strategically placed within the clinic.c source file, along with its corresponding header file clinic.h. This decision was mainly driven by the function's importance in managing appointments within the clinic. By placing it within the clinic module, it ensures that appointment-related operations are grouped together, which makes it easier to maintain. This architectural decision also minimizes the potential impact of updates to other parts of the system.

-> function convertStringToNumber() was created into core.c/core.h
The convertStringToNumber() function is located in the core.c source file and is accompanied by the core.h header file. This strategic placement is due to the function's usefulness in various parts of the system. By placing it in the core module, it emphasizes its essential nature, as it performs a general conversion operation that can apply to different contexts. This decision to place it in the core module follows the principles of code modularity and reusability, where the core module serves as a basis for functions that can be used across different parts of the system.

-> function getMaximumDayOfTheMonth() was created into core.c/core.h
The function getMaximumDayOfTheMonth() was appropriately placed in both the core.c source file and its corresponding core.h header file. This choice was made because the function is relevant to several modules that rely on date calculations. By keeping it centralized within the core module, it emphasizes its versatility and makes it easier to maintain code. Any changes to date-related calculations can be managed systematically within this dedicated module.
